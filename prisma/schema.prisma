// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id   String   @id @default(cuid())
  role UserRole @default(USER)

  email        String  @unique
  password     String
  refreshToken String?

  username  String  @unique
  avatar    String  @default("https://lh3.googleusercontent.com/d/1yhM-tDrQwh166RGAqTGzLKPvVri7jAKD")
  biography String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserFilmFavorite  UserFilmFavorite[]
  UserFilmWatchlist UserFilmWatchlist[]
  UserFilmReview    UserFilmReview[]
  ForumParent       ForumParent[]
  ForumChild        ForumChild[]

  @@map("users")
}

model Films {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  synopsis String
  genre    FilmGenre[]
  poster   String
  trailer  String

  rating         Float @default(0)
  totalReviews   Int   @default(0)
  totalFavorites Int   @default(0)

  releaseDate DateTime
  finishDate  DateTime

  UserFilmFavorite  UserFilmFavorite[]
  UserFilmWatchlist UserFilmWatchlist[]
  UserFilmReview    UserFilmReview[]

  @@map("films")
}

model UserFilmFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id String
  film_id String

  user Users @relation(fields: [user_id], references: [id])
  film Films @relation(fields: [film_id], references: [id])

  @@map("user_film_favorite")
}

model UserFilmWatchlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id String
  film_id String

  user Users @relation(fields: [user_id], references: [id])
  film Films @relation(fields: [film_id], references: [id])

  @@map("user_film_watchlist")
}

model UserFilmReview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  review String

  user_id String
  film_id String

  user Users @relation(fields: [user_id], references: [id])
  film Films @relation(fields: [film_id], references: [id])

  @@map("user_film_review")
}

model OTPVerification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String  @unique
  otp   String
  type  OTPType

  @@map("otp_verification")
}

model ForumParent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  user_id String
  user    Users  @relation(fields: [user_id], references: [id])

  ForumChild ForumChild[]

  @@map("forum_parent")
}

model ForumChild {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  user_id String
  user    Users  @relation(fields: [user_id], references: [id])

  forum_parent_id String
  forum_parent    ForumParent @relation(fields: [forum_parent_id], references: [id])

  @@map("forum_child")
}

enum OTPType {
  REGISTER
  FORGOT_PASSWORD
  CHANGE_EMAIL
}

enum UserRole {
  USER
  ADMIN
}

enum FilmGenre {
  AKSI
  ANIMASI
  DRAMA
  HOROR
  KELUARGA
  KOMEDI
  PETUALANGAN
  PSIKOLOGIS
  ROMANSA
}
